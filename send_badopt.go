package main

import (
	"fmt"
	"net"

	"golang.org/x/net/ipv4"

	"github.com/unixpickle/essentials"
)

const TCPProtocol = 6

func main() {
	sourceStr := "192.168.1.147"
	destStr := "192.168.1.135"
	source, err := net.ResolveIPAddr("ip", sourceStr)
	essentials.Must(err)
	dest, err := net.ResolveIPAddr("ip", destStr)
	essentials.Must(err)
	conn, err := net.ListenIP("ip4:icmp", source)
	essentials.Must(err)
	rawConn, err := ipv4.NewRawConn(conn)
	essentials.Must(err)
	payload := makePayload()
	header := makeHeader(dest.IP, makeOptions(), payload)
	fmt.Println(header)
	essentials.Must(err)
	for i := 0; i < 10000000; i++ {
		if err := rawConn.WriteTo(header, makePayload(), nil); err != nil {
			fmt.Println(err)
		}
	}
}

func makeHeader(dest net.IP, options, payload []byte) *ipv4.Header {
	return &ipv4.Header{
		Version:  4,
		Len:      20 + len(options),
		TOS:      0,
		TotalLen: 20 + len(options) + len(payload),
		TTL:      64,
		Protocol: TCPProtocol,
		Dst:      dest,
		Options:  options,
	}
}

func makeOptions() []byte {
	//return nil
	res := []byte{}
	for len(res) < 40 {
		res = append(res, 0x44, 2, 13, 37)
	}
	return res
}

func makePayload() []byte {
	tcpHeader := make([]byte, 64)
	// Source port
	tcpHeader[1] = 80
	// Dest port
	tcpHeader[3] = 80
	// Header length
	tcpHeader[12] = 0xf0
	// RST flag
	tcpHeader[13] = 4
	// Window size (woohoo)
	tcpHeader[15] = 1
	return tcpHeader
}
